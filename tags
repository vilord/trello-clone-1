!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Activity	__tests__/activity-model.test.js	/^const Activity = require('..\/models\/activity');$/;"	V
BLUE	constants/background-colors.js	/^  BLUE: '#127ABD',$/;"	P
BLUE	constants/label-colors.js	/^  BLUE: '#127ABD',$/;"	P
Board	__tests__/board-model.test.js	/^const Board = require('..\/models\/board');$/;"	V
Board	routes/boards.js	/^const Board = require('..\/models\/board');$/;"	V
Card	__tests__/card-model.test.js	/^const Card = require('..\/models\/card');$/;"	V
Comment	__tests__/comment-model.test.js	/^const Comment = require('..\/models\/comment');$/;"	V
DARK_GREY	constants/label-colors.js	/^  DARK_GREY: '#4D4D4D',$/;"	P
GREEN	constants/background-colors.js	/^  GREEN: '#53973F',$/;"	P
GREEN	constants/label-colors.js	/^  GREEN: '#64BB55',$/;"	P
GREY	constants/background-colors.js	/^  GREY: '#838C91',$/;"	P
GoogleStrategy	auth/google.js	/^const GoogleStrategy = require('passport-google-oauth').Strategy;$/;"	V
LIGHT_BLUE	constants/background-colors.js	/^  LIGHT_BLUE: '#1CAECA',$/;"	P
LIGHT_BLUE	constants/label-colors.js	/^  LIGHT_BLUE: '#20C2DE',$/;"	P
LIGHT_GREEN	constants/background-colors.js	/^  LIGHT_GREEN: '#50BE6E',$/;"	P
LIGHT_GREEN	constants/label-colors.js	/^  LIGHT_GREEN: '#59E79A',$/;"	P
Label	__tests__/label-model.test.js	/^const Label = require('..\/models\/label');$/;"	V
List	__tests__/list-model.test.js	/^const List = require('..\/models\/list');$/;"	V
LocalStrategy	auth/local.js	/^const LocalStrategy = require('passport-local').Strategy;$/;"	V
MongoStore	app.js	/^const MongoStore = require('connect-mongo')(session);$/;"	V
ORANGE	constants/background-colors.js	/^  ORANGE: '#D18F3E',$/;"	P
ORANGE	constants/label-colors.js	/^  ORANGE: '#FDAA54',$/;"	P
PINK	constants/background-colors.js	/^  PINK: '#CB5C91',$/;"	P
PINK	constants/label-colors.js	/^  PINK: '#FD83CD',$/;"	P
PURPLE	constants/background-colors.js	/^  PURPLE: '#88629C',$/;"	P
PURPLE	constants/label-colors.js	/^  PURPLE: '#C27ADE',$/;"	P
RED	constants/background-colors.js	/^  RED: '#AE4736',$/;"	P
RED	constants/label-colors.js	/^  RED: '#E95B4B',$/;"	P
Root	client/src/components/Root.js	/^class Root extends Component {$/;"	C
Router	client/src/components/Root.js	/^import { BrowserRouter as Router } from 'react-router-dom';$/;"	I
Router	client/src/containers/Root.js	/^import { BrowserRouter as Router, Route } from 'react-router-dom';$/;"	I
Schema	__tests__/comment-model.test.js	/^const Schema = require('mongoose').Schema;$/;"	V
Schema	models/activity.js	/^const Schema = mongoose.Schema;$/;"	V
Schema	models/board.js	/^const Schema = mongoose.Schema;$/;"	V
Schema	models/card.js	/^const Schema = mongoose.Schema;$/;"	V
Schema	models/comment.js	/^const Schema = mongoose.Schema;$/;"	V
Schema	models/label.js	/^const Schema = mongoose.Schema;$/;"	V
Schema	models/list.js	/^const Schema = mongoose.Schema;$/;"	V
Schema	models/team.js	/^const Schema = mongoose.Schema;$/;"	V
Schema	models/user.js	/^const Schema = mongoose.Schema;$/;"	V
TODO	__tests__/team-model.test.js	/^  \/\/ TODO: Add logo$/;"	T
TODO	routes/auth.js	/^  \/\/ TODO:$/;"	T
Team	__tests__/team-model.test.js	/^const Team = require('..\/models\/team');$/;"	V
User	__tests__/activity-model.test.js	/^const User = require('..\/models\/user');$/;"	V
User	__tests__/comment-model.test.js	/^const User = require('..\/models\/user');$/;"	V
User	__tests__/team-model.test.js	/^const User = require('..\/models\/user');$/;"	V
User	__tests__/user-model.test.js	/^const User = require('..\/models\/user');$/;"	V
User	auth/local.js	/^const User = require('..\/models\/user');$/;"	V
User	auth/passportUserSetup.js	/^const User = require('..\/models\/user');$/;"	V
User	routes/auth.js	/^const User = require('..\/models\/user');$/;"	V
User	routes/users.js	/^const User = require('..\/models\/user');$/;"	V
Users	auth/google.js	/^const Users = require('..\/models\/users');$/;"	V
YELLOW	constants/label-colors.js	/^  YELLOW: '#F5DF63',$/;"	P
__v	routes/auth.js	/^      __v: false,$/;"	P
_id	routes/auth.js	/^      _id: false,$/;"	P
a	client/coverage/lcov-report/sorter.js	/^                a = a.data[key];$/;"	P
actions	client/src/actions/index.test.js	/^import * as actions from '.';$/;"	I
actions	client/src/components/App.test.js	/^      const actions = store.getActions();$/;"	V
actions	client/src/reducers/index.test.js	/^import * as actions from '..\/actions';$/;"	I
activity	__tests__/activity-model.test.js	/^      const activity = new Activity();$/;"	V
activity	__tests__/activity-model.test.js	/^    const activity = Activity.schema.paths;$/;"	V
activity	__tests__/activity-model.test.js	/^  const activity = Activity.schema.obj;$/;"	V
activity	models/board.js	/^  activity: [$/;"	P
addSortIndicators	client/coverage/lcov-report/sorter.js	/^    function addSortIndicators() {$/;"	F
addSorting	client/coverage/lcov-report/sorter.js	/^var addSorting = (function () {$/;"	F
admin	__tests__/board-model.test.js	/^        const admin = obj.admin;$/;"	V
admin	__tests__/team-model.test.js	/^            admin: false,$/;"	P
admin	__tests__/team-model.test.js	/^            admin: true,$/;"	P
admin	__tests__/team-model.test.js	/^        const admin = obj.admin;$/;"	V
apiRoute	__tests__/api.test.js	/^    const apiRoute = '\/api\/users\/1234';$/;"	V
app	app.js	/^const app = express();$/;"	V
app	server.js	/^const app = require('.\/app');$/;"	V
args	start-client.js	/^const args = [ 'start' ];$/;"	A
assigned_cards	models/user.js	/^    assigned_cards: [$/;"	P
auth	app.js	/^const auth = require('.\/routes\/auth');$/;"	V
authRouter	routes/auth.js	/^const authRouter = express.Router();$/;"	V
axios	__tests__/api.test.js	/^const axios = require('axios');$/;"	V
b	client/coverage/lcov-report/sorter.js	/^                b = b.data[key];$/;"	P
backgroundColors	models/board.js	/^const backgroundColors = require('..\/constants\/background-colors');$/;"	V
bio	__tests__/user-model.test.js	/^        bio: ' This is my bio    ',$/;"	P
bio	__tests__/user-model.test.js	/^        bio: '',$/;"	P
board	__tests__/board-model.test.js	/^      const board = new Board();$/;"	V
board	__tests__/board-model.test.js	/^  const board = Board.schema.obj;$/;"	V
board	__tests__/user-model.test.js	/^        const board = obj.board;$/;"	V
boards	models/team.js	/^  boards: [$/;"	P
boards	models/user.js	/^    boards: [$/;"	P
bodyParser	app.js	/^const bodyParser = require('body-parser');$/;"	V
callbackURL	auth/google.js	/^      callbackURL: process.env.GOOGLE_CALLBACK_URL,$/;"	P
card	__tests__/card-model.test.js	/^      const card = new Card();$/;"	V
card	__tests__/card-model.test.js	/^  const card = Card.schema.obj;$/;"	V
cards	models/list.js	/^  cards: [$/;"	P
checkValidServiceWorker	client/coverage/lcov-report/src/registerServiceWorker.js.html	/^function checkValidServiceWorker(swUrl) {$/;"	f
checkValidServiceWorker	client/src/registerServiceWorker.js	/^function checkValidServiceWorker(swUrl) {$/;"	F
checklist	__tests__/card-model.test.js	/^      const checklist = Checklist.obj;$/;"	V
checklists	models/card.js	/^  checklists: [Checklist],$/;"	P
clientID	auth/google.js	/^      clientID: process.env.GOOGLE_CLIENT_ID,$/;"	P
clientSecret	auth/google.js	/^      clientSecret: process.env.GOOGLE_CLIENT_SECRET,$/;"	P
cls	client/coverage/lcov-report/sorter.js	/^            cls = col.className;$/;"	P
cls	client/coverage/lcov-report/sorter.js	/^        cls = cls.replace(\/ sorted$\/, '').replace(\/ sorted-desc$\/, '');$/;"	P
col	client/coverage/lcov-report/sorter.js	/^            col = cols[i];$/;"	P
colNode	client/coverage/lcov-report/sorter.js	/^            colNode = colNodes[i];$/;"	P
colNode	client/coverage/lcov-report/sorter.js	/^            colNode = tableCols[i];$/;"	P
color	__tests__/board-model.test.js	/^            color: 'invalid color',$/;"	P
color	__tests__/board-model.test.js	/^            color: GREEN,$/;"	P
color	__tests__/label-model.test.js	/^        color: '#FFF',$/;"	P
color	__tests__/label-model.test.js	/^        color: 'not a hex color',$/;"	P
color	__tests__/label-model.test.js	/^        color: GREEN,$/;"	P
color	__tests__/label-model.test.js	/^    const color = label.color;$/;"	V
cols	client/coverage/lcov-report/sorter.js	/^            cols = [],$/;"	P
cols	client/coverage/lcov-report/sorter.js	/^        cols = loadColumns();$/;"	P
comment	__tests__/comment-model.test.js	/^      const comment = new Comment();$/;"	V
comment	__tests__/comment-model.test.js	/^    const comment = Comment.schema.paths;$/;"	V
comment	__tests__/comment-model.test.js	/^  const comment = Comment.schema.obj;$/;"	V
comments	models/card.js	/^  comments: [$/;"	P
componentWillMount	client/src/components/App.js	/^  componentWillMount() {$/;"	M
container	client/src/components/App.test.js	/^    container = shallow(<ConnectedApp store={store} \/>);$/;"	P
cookieParser	app.js	/^const cookieParser = require('cookie-parser');$/;"	V
createdAt	routes/auth.js	/^      createdAt: false,$/;"	P
data	client/coverage/lcov-report/sorter.js	/^            data = {},$/;"	P
data	client/src/actions/index.js	/^export const receivePosts = (subreddit, data) => ({$/;"	E
data	client/src/actions/index.test.js	/^        data: { subreddit },$/;"	P
data	client/src/components/App.js	/^  data: PropTypes.object,$/;"	P
data	client/src/components/App.test.js	/^          data={{}}$/;"	P
data	client/src/components/App.test.js	/^        data={{}}$/;"	P
data	client/src/components/App.test.js	/^    data: {},$/;"	P
data	client/src/reducers/index.js	/^        data: action.data,$/;"	P
data	client/src/reducers/index.js	/^  data: {},$/;"	P
data	client/src/reducers/index.test.js	/^    data: {},$/;"	P
default	models/board.js	/^        default: false,$/;"	P
default	models/board.js	/^      default: BLUE,$/;"	P
default	models/board.js	/^    default: 'public',$/;"	P
default	models/card.js	/^        default: false,$/;"	P
default	models/card.js	/^      default: false,$/;"	P
default	models/card.js	/^    default: false,$/;"	P
default	models/list.js	/^    default: false,$/;"	P
default	models/team.js	/^          default: false,$/;"	P
default	models/team.js	/^    default: true,$/;"	P
default	models/user.js	/^          default: false,$/;"	P
desc	client/coverage/lcov-report/sorter.js	/^                        desc = !currentSort.desc;$/;"	P
desc	client/coverage/lcov-report/sorter.js	/^                    var desc = col.defaultDescSort;$/;"	V
desc	client/coverage/lcov-report/sorter.js	/^            desc: false$/;"	P
el	client/coverage/lcov-report/sorter.js	/^                el = getNthColumn(i).querySelector('.sorter').parentElement;$/;"	P
email	__tests__/activity-model.test.js	/^          email: 'some email',$/;"	P
email	__tests__/comment-model.test.js	/^                email: 'pepito@example.com',$/;"	P
email	__tests__/comment-model.test.js	/^            email: 'pepito@perez.com',$/;"	P
email	__tests__/team-model.test.js	/^              email: 'some@email.com',$/;"	P
email	__tests__/user-model.test.js	/^        email: '  username@example.com  ',$/;"	P
email	__tests__/user-model.test.js	/^        email: 'USERNAME@EXAMPLE.COM',$/;"	P
email	__tests__/user-model.test.js	/^        email: 'invalid email',$/;"	P
email	__tests__/user-model.test.js	/^        email: 'someone@example.com',$/;"	P
email	__tests__/user-model.test.js	/^        email: 'username@example.com',$/;"	P
emojiCodes	__tests__/comment-model.test.js	/^const emojiCodes = require('..\/constants\/emoji-codes');$/;"	V
emojiCodes	models/comment.js	/^const emojiCodes = require('..\/constants\/emoji-codes');$/;"	V
enableUI	client/coverage/lcov-report/sorter.js	/^    function enableUI() {$/;"	F
enum	models/board.js	/^      enum: Object.values(backgroundColors),$/;"	P
enum	models/board.js	/^    enum: ['public', 'team', 'private'],$/;"	P
enum	models/comment.js	/^        enum: emojiCodes,$/;"	P
enum	models/label.js	/^    enum: Object.values(labelColors),$/;"	P
err	__tests__/activity-model.test.js	/^      const err = activity.validateSync();$/;"	V
err	__tests__/board-model.test.js	/^        const err = board.validateSync();$/;"	V
err	__tests__/board-model.test.js	/^      const err = board.validateSync();$/;"	V
err	__tests__/card-model.test.js	/^      const err = card.validateSync();$/;"	V
err	__tests__/comment-model.test.js	/^        const err = comment.validateSync();$/;"	V
err	__tests__/comment-model.test.js	/^      const err = comment.validateSync();$/;"	V
err	__tests__/label-model.test.js	/^      const err = label.validateSync();$/;"	V
err	__tests__/list-model.test.js	/^      const err = list.validateSync();$/;"	V
err	__tests__/team-model.test.js	/^      const err = team.validateSync();$/;"	V
err	__tests__/user-model.test.js	/^      const err = user.validateSync();$/;"	V
err	app.js	/^  const err = new Error('Not Found');$/;"	V
err	routes/auth.js	/^    const err = new Error('Need username and password to sign up');$/;"	V
error	client/src/actions/index.js	/^        error => console.log('An error occurred.', error),$/;"	P
errorMsg	middleware/verifyUser.js	/^      errorMsg: 'You need to login first',$/;"	P
errorMsg	routes/auth.js	/^          errorMsg: 'Could not log in user',$/;"	P
errorMsg	routes/auth.js	/^        errorMsg: 'Incorrect Username or Password',$/;"	P
errorMsg	routes/auth.js	/^        errorMsg: 'This username already exists, please choose another option',$/;"	P
expectedAction	client/src/actions/index.test.js	/^    const expectedAction = {$/;"	O
expectedActions	client/src/actions/index.test.js	/^    const expectedActions = [$/;"	A
express	app.js	/^const express = require('express');$/;"	V
express	routes/auth.js	/^const express = require('express');$/;"	V
express	routes/boards.js	/^const express = require('express');$/;"	V
express	routes/users.js	/^const express = require('express');$/;"	V
favicon	app.js	/^const favicon = require('serve-favicon');$/;"	V
favorite	__tests__/user-model.test.js	/^        const favorite = obj.favorite;$/;"	V
fetch	client/src/actions/index.js	/^export const fetchPosts = subreddit => {$/;"	E
fetchPosts	client/src/components/App.js	/^  fetchPosts: PropTypes.func.isRequired,$/;"	P
fetchPosts	client/src/components/App.test.js	/^          fetchPosts={jest.fn()}$/;"	P
fetchPosts	client/src/components/App.test.js	/^        fetchPosts={jest.fn()}$/;"	P
finalSorter	client/coverage/lcov-report/sorter.js	/^            finalSorter = function (a, b) {$/;"	M
finalSorter	client/coverage/lcov-report/sorter.js	/^            finalSorter = sorter,$/;"	P
function	auth/google.js	/^    function(accessToken, refreshToken, profile, done) {$/;"	M
function	routes/auth.js	/^    function(err, user) {$/;"	M
getInfo	client/src/components/App.test.js	/^    getInfo: jest.fn(),$/;"	P
getNthColumn	client/coverage/lcov-report/sorter.js	/^    function getNthColumn(n) { return getTableHeader().querySelectorAll('th')[n]; }$/;"	F
getTable	client/coverage/lcov-report/sorter.js	/^    function getTable() { return document.querySelector('.coverage-summary'); }$/;"	F
getTableBody	client/coverage/lcov-report/sorter.js	/^    function getTableBody() { return getTable().querySelector('tbody'); }$/;"	F
getTableHeader	client/coverage/lcov-report/sorter.js	/^    function getTableHeader() { return getTable().querySelector('thead tr'); }$/;"	F
headers	client/src/actions/index.test.js	/^      headers: { 'content-type': 'application\/json' },$/;"	P
host	__tests__/api.test.js	/^  const host = 'http:\/\/localhost';$/;"	V
id	auth/google.js	/^        id: profile.id,$/;"	P
index	client/coverage/lcov-report/sorter.js	/^            index: 0,$/;"	P
initState	client/src/reducers/index.js	/^const initState = {$/;"	O
initState	client/src/reducers/index.test.js	/^  const initState = {$/;"	O
initialState	client/src/components/App.test.js	/^  const initialState = {$/;"	O
initials	__tests__/user-model.test.js	/^        initials: '  ',$/;"	P
initials	__tests__/user-model.test.js	/^        initials: '',$/;"	P
initials	__tests__/user-model.test.js	/^        initials: 'jda',$/;"	P
initials	__tests__/user-model.test.js	/^        initials: 'someone',$/;"	P
installingWorker	client/src/registerServiceWorker.js	/^        const installingWorker = registration.installing;$/;"	V
isEmail	models/user.js	/^const isEmail = require('validator\/lib\/isEmail');$/;"	V
isFetching	client/src/components/App.js	/^  isFetching: PropTypes.bool.isRequired,$/;"	P
isFetching	client/src/components/App.test.js	/^          isFetching={false}$/;"	P
isFetching	client/src/components/App.test.js	/^        isFetching={false}$/;"	P
isFetching	client/src/components/App.test.js	/^    isFetching: false,$/;"	P
isFetching	client/src/reducers/index.js	/^        isFetching: false,$/;"	P
isFetching	client/src/reducers/index.js	/^        isFetching: true,$/;"	P
isFetching	client/src/reducers/index.js	/^  isFetching: false,$/;"	P
isFetching	client/src/reducers/index.test.js	/^    isFetching: false,$/;"	P
isURL	models/board.js	/^const isURL = require('validator\/lib\/isURL');$/;"	V
isURL	models/team.js	/^const isURL = require('validator\/lib\/isURL');$/;"	V
items	models/card.js	/^  items: [$/;"	P
key	client/coverage/lcov-report/sorter.js	/^                key: colNode.getAttribute('data-col'),$/;"	P
label	__tests__/label-model.test.js	/^      const label = new Label();$/;"	V
label	__tests__/label-model.test.js	/^  const label = Label.schema.obj;$/;"	V
label	models/card.js	/^  label: [$/;"	P
labelColors	models/label.js	/^const labelColors = require('..\/constants\/label-colors');$/;"	V
labels	models/board.js	/^  labels: [$/;"	P
list	__tests__/list-model.test.js	/^      const list = new List();$/;"	V
list	__tests__/list-model.test.js	/^  const list = List.schema.obj;$/;"	V
lists	models/board.js	/^  lists: [$/;"	P
loadColumns	client/coverage/lcov-report/sorter.js	/^    function loadColumns() {$/;"	F
loadData	client/coverage/lcov-report/sorter.js	/^    function loadData() {$/;"	F
loadRowData	client/coverage/lcov-report/sorter.js	/^    function loadRowData(tableRow) {$/;"	F
logger	app.js	/^const logger = require('morgan');$/;"	V
lowercase	models/team.js	/^    lowercase: true,$/;"	P
lowercase	models/user.js	/^      lowercase: true,$/;"	P
mapStateToProps	client/src/components/App.js	/^const mapStateToProps = ({ show, isFetching, data, subreddit }) => ({$/;"	F
match	models/board.js	/^    match: \/^((?!\\s{2,}).)*$\/,$/;"	P
match	models/team.js	/^    match: \/^((?!\\s{2,}).)*$\/,$/;"	P
match	models/team.js	/^    match: \/^\\w{3,}$\/,$/;"	P
match	models/user.js	/^      match: \/^((?!\\s).)*$\/,$/;"	P
match	models/user.js	/^      match: \/^((?!\\s+).)*$\/,$/;"	P
match	models/user.js	/^      match: \/^((?!\\s{2,}).)*$\/,$/;"	P
maxlength	models/activity.js	/^      maxlength: 500,$/;"	P
maxlength	models/card.js	/^    maxlength: 20000,$/;"	P
maxlength	models/comment.js	/^      maxlength: 20000,$/;"	P
maxlength	models/label.js	/^    maxlength: 35,$/;"	P
maxlength	models/list.js	/^    maxlength: 100,$/;"	P
maxlength	models/team.js	/^    maxlength: 20000,$/;"	P
maxlength	models/user.js	/^      maxlength: 4,$/;"	P
maxlength	models/user.js	/^      maxlength: 500,$/;"	P
maxlength	models/user.js	/^      maxlength: 70,$/;"	P
members	__tests__/team-model.test.js	/^        members: [$/;"	P
members	models/board.js	/^  members: [$/;"	P
members	models/card.js	/^  members: [$/;"	P
mentions	models/activity.js	/^    mentions: [$/;"	P
message	__tests__/api.test.js	/^        message: 'user1234',$/;"	P
message	models/board.js	/^        message: 'Must be a valid URL',$/;"	P
message	models/comment.js	/^          message: 'Your emoji_reaction need at least one user',$/;"	P
message	models/team.js	/^      message: 'You need at least one member with admin status.',$/;"	P
message	models/team.js	/^      message: 'You need to provide a valid URL',$/;"	P
message	models/user.js	/^        message: 'Must be a valid email address',$/;"	P
message	routes/auth.js	/^              message: 'User Correctly Created',$/;"	P
message	routes/auth.js	/^    message: 'User logged out',$/;"	P
middleware	client/src/actions/index.test.js	/^const middleware = [thunk];$/;"	A
middleware	client/src/components/App.test.js	/^  const middleware = [thunk];$/;"	A
middleware	client/src/configureStore.js	/^const middleware = [thunk];$/;"	A
minlength	models/user.js	/^      minlength: 1,$/;"	P
mockStore	client/src/actions/index.test.js	/^const mockStore = configureStore(middleware);$/;"	V
mockStore	client/src/components/App.test.js	/^  const mockStore = configureStore();$/;"	V
mockStore	client/src/components/App.test.js	/^  const mockStore = configureStore(middleware);$/;"	V
mongoURI	server.js	/^const mongoURI = process.env.MONGO_URI || 'mongodb:\/\/localhost:27017\/trello';$/;"	V
mongoose	__tests__/user-model.test.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	app.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	models/activity.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	models/board.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	models/card.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	models/comment.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	models/label.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	models/list.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	models/team.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	models/user.js	/^const mongoose = require('mongoose');$/;"	V
mongoose	server.js	/^const mongoose = require('mongoose');$/;"	V
name	__tests__/team-model.test.js	/^        name: '  some name  ',$/;"	P
name	__tests__/team-model.test.js	/^        name: 'invalid  spaced  name',$/;"	P
name	__tests__/team-model.test.js	/^        name: 'some name',$/;"	P
name	__tests__/team-model.test.js	/^        name: 'valid spaced name',$/;"	P
name	__tests__/user-model.test.js	/^        name: '   John Doe   ',$/;"	P
name	__tests__/user-model.test.js	/^        name: 'John   Doe',$/;"	P
name	__tests__/user-model.test.js	/^        name: 'John Doe',$/;"	P
name	auth/google.js	/^        name: profile.displayName,$/;"	P
nock	__tests__/api.test.js	/^const nock = require('nock');$/;"	V
onToggleClick	client/src/components/App.test.js	/^    onToggleClick: jest.fn(),$/;"	P
options	auth/google.js	/^      const options = {$/;"	O
opts	start-client.js	/^const opts = { stdio: 'inherit', cwd: 'client', shell: true };$/;"	O
passport	app.js	/^const passport = require('passport');$/;"	V
passport	auth/google.js	/^const passport = require('passport');$/;"	V
passport	auth/local.js	/^const passport = require('passport');$/;"	V
passport	auth/passportUserSetup.js	/^const passport = require('passport');$/;"	V
passportLocal	routes/auth.js	/^const passportLocal = require('..\/auth\/local');$/;"	V
passportUserSetup	auth/google.js	/^const passportUserSetup = require('.\/passportUserSetup');$/;"	V
passportUserSetup	auth/local.js	/^const passportUserSetup = require('.\/passportUserSetup');$/;"	V
password	routes/auth.js	/^        password: newUser.generateHash(password),$/;"	P
password	routes/auth.js	/^      password: false,$/;"	P
path	app.js	/^const path = require('path');$/;"	V
picture	__tests__/board-model.test.js	/^            picture: 'https:\/\/images.unsplash.com\/photo',$/;"	P
picture	__tests__/board-model.test.js	/^            picture: 'invalid URL',$/;"	P
port	server.js	/^const port = process.env.PORT || 3001;$/;"	V
publicUrl	client/src/registerServiceWorker.js	/^    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);$/;"	V
receive	client/src/actions/index.js	/^export const receivePosts = (subreddit, data) => ({$/;"	E
reducer	client/src/reducers/index.js	/^const reducer = (state = initState, action) => {$/;"	F
ref	models/activity.js	/^        ref: 'User',$/;"	P
ref	models/activity.js	/^      ref: 'Board',$/;"	P
ref	models/activity.js	/^      ref: 'Card',$/;"	P
ref	models/activity.js	/^      ref: 'User',$/;"	P
ref	models/board.js	/^        ref: 'User',$/;"	P
ref	models/board.js	/^      ref: 'Activity',$/;"	P
ref	models/board.js	/^      ref: 'Label',$/;"	P
ref	models/board.js	/^      ref: 'List',$/;"	P
ref	models/card.js	/^      ref: 'Label',$/;"	P
ref	models/card.js	/^      ref: 'User',$/;"	P
ref	models/card.js	/^    ref: 'Board',$/;"	P
ref	models/card.js	/^    ref: 'List',$/;"	P
ref	models/comment.js	/^          ref: 'User',$/;"	P
ref	models/comment.js	/^      ref: 'User',$/;"	P
ref	models/list.js	/^      ref: 'Card',$/;"	P
ref	models/team.js	/^          ref: 'User',$/;"	P
ref	models/team.js	/^      ref: 'Board',$/;"	P
ref	models/user.js	/^          ref: 'Board',$/;"	P
ref	models/user.js	/^        ref: 'Card',$/;"	P
ref	models/user.js	/^        ref: 'Team',$/;"	P
ref	models/user.js	/^      ref: 'Activity',$/;"	P
registerValidSW	client/coverage/lcov-report/src/registerServiceWorker.js.html	/^function registerValidSW(swUrl) {$/;"	f
registerValidSW	client/src/registerServiceWorker.js	/^function registerValidSW(swUrl) {$/;"	F
removeSortIndicators	client/coverage/lcov-report/sorter.js	/^    function removeSortIndicators() {$/;"	F
render	client/src/components/App.js	/^  render() {$/;"	M
render	client/src/components/Root.js	/^  render() {$/;"	M
request	client/src/actions/index.js	/^export const requestPosts = subreddit => ({$/;"	E
required	models/activity.js	/^      required: true,$/;"	P
required	models/board.js	/^    required: true,$/;"	P
required	models/card.js	/^        required: true,$/;"	P
required	models/card.js	/^    required: true,$/;"	P
required	models/comment.js	/^      required: true,$/;"	P
required	models/label.js	/^    required: true,$/;"	P
required	models/list.js	/^    required: true,$/;"	P
required	models/team.js	/^    required: true,$/;"	P
required	models/user.js	/^      required: true,$/;"	P
resave	app.js	/^    resave: false,$/;"	P
response	client/src/actions/index.js	/^        response => response.json(),$/;"	P
router	routes/boards.js	/^const router = express.Router();$/;"	V
router	routes/users.js	/^const router = express.Router();$/;"	V
rowNodes	client/coverage/lcov-report/sorter.js	/^            rowNodes = tableBody.querySelectorAll('tr'),$/;"	P
rows	client/coverage/lcov-report/sorter.js	/^            rows = [],$/;"	P
saveUninitialized	app.js	/^    saveUninitialized: true,$/;"	P
searchQuery	auth/google.js	/^      const searchQuery = {$/;"	O
secret	app.js	/^    secret: sessionSecret,$/;"	P
session	app.js	/^const session = require('express-session');$/;"	V
sessionSecret	app.js	/^const sessionSecret = process.env.SESSION_SECRET || 'mySecret';$/;"	V
setDefaultsOnInsert	auth/google.js	/^        setDefaultsOnInsert: true,$/;"	P
shortname	__tests__/team-model.test.js	/^        shortname: 'a f',$/;"	P
shortname	__tests__/team-model.test.js	/^        shortname: 'aaa',$/;"	P
shortname	__tests__/team-model.test.js	/^        shortname: 'af',$/;"	P
shortname	__tests__/team-model.test.js	/^        shortname: 'shortname',$/;"	P
shortname	__tests__/team-model.test.js	/^        shortname: 'some shortname',$/;"	P
show	client/src/components/App.js	/^  show: PropTypes.bool.isRequired,$/;"	P
show	client/src/components/App.test.js	/^          show={true}$/;"	P
show	client/src/components/App.test.js	/^        show={true}$/;"	P
show	client/src/components/App.test.js	/^    show: false,$/;"	P
show	client/src/reducers/index.js	/^        show: !state.show,$/;"	P
show	client/src/reducers/index.js	/^  show: false,$/;"	P
show	client/src/reducers/index.test.js	/^    show: false,$/;"	P
sortByIndex	client/coverage/lcov-report/sorter.js	/^    function sortByIndex(index, desc) {$/;"	F
sortable	client/coverage/lcov-report/sorter.js	/^                sortable: !colNode.getAttribute('data-nosort'),$/;"	P
sorter	client/coverage/lcov-report/sorter.js	/^            sorter = function (a, b) {$/;"	M
store	app.js	/^    store: new MongoStore({ mongooseConnection: mongoose.connection }),$/;"	P
store	client/src/components/App.test.js	/^    store = mockStore(initialState);$/;"	P
store	client/src/components/Root.js	/^const store = configureStore();$/;"	V
subreddit	client/src/actions/index.test.js	/^    const subreddit = 'programming';$/;"	V
subreddit	client/src/components/App.js	/^  subreddit: PropTypes.string,$/;"	P
subreddit	client/src/components/App.test.js	/^          subreddit=""$/;"	P
subreddit	client/src/components/App.test.js	/^        subreddit=""$/;"	P
subreddit	client/src/components/App.test.js	/^    subreddit: '',$/;"	P
subreddit	client/src/reducers/index.js	/^        subreddit: action.subreddit,$/;"	P
subreddit	client/src/reducers/index.js	/^  subreddit: '',$/;"	P
subreddit	client/src/reducers/index.test.js	/^    subreddit: '',$/;"	P
tableBody	client/coverage/lcov-report/sorter.js	/^            tableBody = document.querySelector('.coverage-summary tbody'),$/;"	P
team	__tests__/team-model.test.js	/^      const team = new Team();$/;"	V
team	__tests__/team-model.test.js	/^  const team = Team.schema.obj;$/;"	V
teams	models/user.js	/^    teams: [$/;"	P
text	__tests__/comment-model.test.js	/^          text: 'some comment',$/;"	P
text	__tests__/comment-model.test.js	/^        text: '',$/;"	P
text_code	__tests__/comment-model.test.js	/^            text_code: 'invalid code',$/;"	P
text_code	__tests__/comment-model.test.js	/^            text_code: emojiCodes[0],$/;"	P
timestamps	models/activity.js	/^    timestamps: true,$/;"	P
timestamps	models/comment.js	/^    timestamps: true,$/;"	P
timestamps	models/user.js	/^    timestamps: true,$/;"	P
title	__tests__/board-model.test.js	/^          title: 'some title',$/;"	P
title	__tests__/board-model.test.js	/^        title: '  some title  ',$/;"	P
title	__tests__/board-model.test.js	/^        title: 'invalid  spaced  title',$/;"	P
title	__tests__/board-model.test.js	/^        title: 'valid title',$/;"	P
title	__tests__/card-model.test.js	/^        title: '  some title  ',$/;"	P
title	__tests__/list-model.test.js	/^        title: '  some title   ',$/;"	P
toggle	client/src/actions/index.js	/^export const toggleShow = {$/;"	E
toggleShow	client/src/components/App.js	/^  toggleShow: PropTypes.func.isRequired,$/;"	P
toggleShow	client/src/components/App.test.js	/^          toggleShow={jest.fn()}$/;"	P
toggleShow	client/src/components/App.test.js	/^        toggleShow={jest.fn()}$/;"	P
trim	models/board.js	/^    trim: true,$/;"	P
trim	models/card.js	/^    trim: true,$/;"	P
trim	models/list.js	/^    trim: true,$/;"	P
trim	models/team.js	/^    trim: true,$/;"	P
trim	models/user.js	/^      trim: true,$/;"	P
type	client/coverage/lcov-report/sorter.js	/^                type: colNode.getAttribute('data-type') || 'string'$/;"	P
type	client/src/actions/index.js	/^  type: RECEIVE_POSTS,$/;"	P
type	client/src/actions/index.js	/^  type: REQUEST_POSTS,$/;"	P
type	client/src/actions/index.js	/^  type: TOGGLE_SHOW,$/;"	P
type	client/src/actions/index.test.js	/^        type: actions.RECEIVE_POSTS,$/;"	P
type	client/src/actions/index.test.js	/^      type: actions.REQUEST_POSTS,$/;"	P
type	models/activity.js	/^        type: ObjectId,$/;"	P
type	models/activity.js	/^      type: ObjectId,$/;"	P
type	models/activity.js	/^      type: String,$/;"	P
type	models/board.js	/^        type: Boolean,$/;"	P
type	models/board.js	/^        type: ObjectId,$/;"	P
type	models/board.js	/^      type: ObjectId,$/;"	P
type	models/board.js	/^      type: String,$/;"	P
type	models/board.js	/^    type: String,$/;"	P
type	models/card.js	/^        type: Boolean,$/;"	P
type	models/card.js	/^        type: String,$/;"	P
type	models/card.js	/^      type: Boolean,$/;"	P
type	models/card.js	/^      type: ObjectId,$/;"	P
type	models/card.js	/^    type: Boolean,$/;"	P
type	models/card.js	/^    type: Date,$/;"	P
type	models/card.js	/^    type: ObjectId,$/;"	P
type	models/card.js	/^    type: String,$/;"	P
type	models/card.js	/^    type:String,$/;"	P
type	models/comment.js	/^          type: Schema.Types.ObjectId,$/;"	P
type	models/comment.js	/^        type: String,$/;"	P
type	models/comment.js	/^      type: Schema.Types.ObjectId,$/;"	P
type	models/comment.js	/^      type: String,$/;"	P
type	models/label.js	/^    type: String,$/;"	P
type	models/list.js	/^      type: ObjectId,$/;"	P
type	models/list.js	/^    type: Boolean,$/;"	P
type	models/list.js	/^    type: String,$/;"	P
type	models/team.js	/^          type: Boolean,$/;"	P
type	models/team.js	/^          type: ObjectId,$/;"	P
type	models/team.js	/^      type: ObjectId,$/;"	P
type	models/team.js	/^    type: Boolean,$/;"	P
type	models/team.js	/^    type: String,$/;"	P
type	models/team.js	/^    type: [$/;"	P
type	models/user.js	/^          type: Boolean,$/;"	P
type	models/user.js	/^          type: ObjectId,$/;"	P
type	models/user.js	/^        type: ObjectId,$/;"	P
type	models/user.js	/^      type: ObjectId,$/;"	P
type	models/user.js	/^      type: String,$/;"	P
unique	models/team.js	/^    unique: true,$/;"	P
unique	models/user.js	/^      unique: true,$/;"	P
updatedAt	routes/auth.js	/^      updatedAt: false,$/;"	P
updates	auth/google.js	/^      const updates = {$/;"	O
uppercase	models/user.js	/^      uppercase: true,$/;"	P
upsert	auth/google.js	/^        upsert: true,$/;"	P
user	__tests__/board-model.test.js	/^        const user = obj.user;$/;"	V
user	__tests__/team-model.test.js	/^        const user = obj.user;$/;"	V
user	__tests__/user-model.test.js	/^      const user = new User();$/;"	V
user	__tests__/user-model.test.js	/^  const user = User.schema.obj;$/;"	V
user	routes/auth.js	/^        user: formattedUser,$/;"	P
user	routes/users.js	/^    const user = await User.createUser(email, username);$/;"	V
username	__tests__/activity-model.test.js	/^          username: 'some username',$/;"	P
username	__tests__/comment-model.test.js	/^                username: 'someone',$/;"	P
username	__tests__/comment-model.test.js	/^            username: 'pepito',$/;"	P
username	__tests__/team-model.test.js	/^              username: 'some username',$/;"	P
username	__tests__/team-model.test.js	/^              username: 'someone',$/;"	P
username	__tests__/user-model.test.js	/^        username: ' asdf asdf',$/;"	P
username	__tests__/user-model.test.js	/^        username: ' asdf_asdf ',$/;"	P
username	__tests__/user-model.test.js	/^        username: 'someone',$/;"	P
username	auth/google.js	/^        username: profile.name.givenName,$/;"	P
users	__tests__/comment-model.test.js	/^            users: [$/;"	P
users	__tests__/comment-model.test.js	/^      const users = comment.emoji_reaction.users;$/;"	V
users	app.js	/^const users = require('.\/routes\/users');$/;"	V
val	client/coverage/lcov-report/sorter.js	/^                val = Number(val);$/;"	P
val	client/coverage/lcov-report/sorter.js	/^            val = colNode.getAttribute('data-value');$/;"	P
validator	models/board.js	/^        validator: x => isURL(x),$/;"	P
validator	models/comment.js	/^          validator: function(x) {$/;"	M
validator	models/team.js	/^      validator: arr => arr.length >= 1 && arr.filter(x => x.admin).length >= 1,$/;"	P
validator	models/team.js	/^      validator: x => isURL(x),$/;"	P
validator	models/user.js	/^        validator: x => isEmail(x),$/;"	P
value	client/src/components/App.test.js	/^  const value = 'Showing';$/;"	V
verifyUser	routes/auth.js	/^const verifyUser = require('..\/middleware\/verifyUser');$/;"	V
visibility	__tests__/board-model.test.js	/^        visibility: 'public',$/;"	P
visibility	__tests__/board-model.test.js	/^        visibility: 'some',$/;"	P
website	__tests__/team-model.test.js	/^        website: 'http:\/\/example.com',$/;"	P
website	__tests__/team-model.test.js	/^        website: 'invalid URL',$/;"	P
wrapper	client/src/components/App.test.js	/^    wrapper = mount($/;"	P
wrapper	client/src/components/App.test.js	/^    wrapper = shallow($/;"	P
